# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

trigger:
- main

variables:
  buildConfiguration: 'Release'
  springPetRepository: 'nmalvankar/spring-petclinic'
  mySqlRepository: 'nmalvankar/mysql'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'secret'
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '-Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'

resources:
  repositories:
  - repository: azure_test
    type: github
    name: jgoldsmith613/azure_test
    endpoint: jgoldsmith613

stages:
- stage: 'Build'
  displayName: 'Build and push'
  jobs:  
  - job: 'Build'
    displayName: 'Build job'
    pool:
      vmImage: 'ubuntu-latest'

    steps:
    - task: Cache@2
      displayName: Cache Maven local repo
      inputs:
        key: 'maven | "$(Agent.OS)" | **/pom.xml'
        restoreKeys: |
          maven | "$(Agent.OS)"
          maven
        path: $(MAVEN_CACHE_FOLDER)

    - script: mvn install -B -e
    - task: Maven@3
      displayName: 'Build the maven artifact'
      inputs:
        mavenPomFile: 'pom.xml'
        mavenOptions: '-Xmx3072m $(MAVEN_OPTS)'
        javaHomeOption: 'JDKVersion'
        jdkVersionOption: '1.8'
        jdkArchitectureOption: 'x64'
        publishJUnitResults: true
        testResultsFiles: '**/surefire-reports/TEST-*.xml'
        goals: 'package'

    - task: Docker@2
      displayName: 'Build and push the image to container registry'
      inputs:
        command: buildAndPush
        buildContext: $(Build.Repository.LocalPath)
        repository: $(springPetRepository)
        dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
        containerRegistry: 'my-quay-registry'
        tags: |
          $(tag)
    
    - publish: '$(Build.SourcesDirectory)/manifests'
      artifact: manifests

- stage: 'Deploy_Dev'
  displayName: 'Deploy to Dev'
  dependsOn: Build
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'openshift.dev'
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: manifests
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: 'my-quay-registry'
              kubernetesServiceConnection: 'openshift-dev-1652736334320'
              namespace: 'dev'
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              kubernetesServiceConnection: 'openshift-dev-1652736334320'
              namespace: 'dev'
              manifests: |
                $(Pipeline.Workspace)/manifests/dev/cm.yaml
                $(Pipeline.Workspace)/manifests/dev/secret.yaml
                $(Pipeline.Workspace)/manifests/dev/deployment.yaml
                $(Pipeline.Workspace)/manifests/dev/service.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(RegistryName)/$(springPetRepository):$(tag)
                $(RegistryName)/$(mySqlRepository):latest

- stage: 'Deploy_Stage'
  displayName: 'Deploy to Stage'
  dependsOn: Deploy_Dev
  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: 'ubuntu-latest'
    environment: 'openshift.stage'
    variables:
    - group: Release
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: manifests
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: 'my-quay-registry'
              kubernetesServiceConnection: 'openshift-stage-1652464815216'
              namespace: 'stage'
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              kubernetesServiceConnection: 'openshift-stage-1652464815216'
              namespace: 'stage'
              manifests: |
                $(Pipeline.Workspace)/manifests/stage/cm.yaml
                $(Pipeline.Workspace)/manifests/stage/secret.yaml
                $(Pipeline.Workspace)/manifests/stage/deployment.yaml
                $(Pipeline.Workspace)/manifests/stage/service.yaml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(RegistryName)/$(springPetRepository):$(tag)
                $(RegistryName)/$(mySqlRepository):latest
- stage: 'test_git_Stage'
  displayName: 'test git to Stage'
  dependsOn: Deploy_Stage
  jobs:
  - job: git
    displayName: git
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: azure_test
      persistCredentials: true


    - script: |
       git config --global user.email pipeline@demo.com & git config --global user.name "Pipeline"
      workingDirectory: $(System.DefaultWorkingDirectory)

    - script: |
       git checkout -b master
       echo 'This is a test' > data.txt
       git add -A
       git commit -m "deployment $(Build.BuildNumber)"
       git push --set-upstream origin master 
       pwd
       ls
       mkdir apple
       cd apple
       touch hello_i_made_it
       touch goodbye
      displayName: Add data.txt file
      workingDirectory: $(System.DefaultWorkingDirectory)

    - task: CopyFiles@2
      displayName: 'Copy powershell scripts for later use in the pipeline'
      inputs:
        contents: 'apple/**'
        targetFolder: '$(Build.ArtifactStagingDirectory)'
    - publish: '$(Build.ArtifactStagingDirectory)/apple'
      displayName: 'Publish scripts for later use'
      artifact: appleFiles

- stage: 'test_file'
  displayName: 'test file'
  dependsOn: test_git_Stage
  jobs:
  - job: shared_test
    displayName: shared_test
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - checkout: none
    - download: current
      artifact: appleFiles
    - script: |
       pwd
       ls
      displayName: Add data.txt file
      workingDirectory: $(System.DefaultWorkingDirectory)
 





